import facebook from '../src/facebook-login';

describe('facebook-login', function() {

  describe('when no appId is supplied', function() {

    beforeEach(function() {
      this.loader = () => facebook({});
    });

    it('throws an error', function() {
      expect(this.loader).to.throw(Error);
    });

  });

  describe('.whenLoaded()', function() {

    beforeEach(function() {
      this.loader = () => facebook({ appId: 'doesntmatter' });
    });

    describe('when the facebook sdk fails to load', function() {

      beforeEach(function() {
        sinon.stub(window.document, 'createElement').throws(new Error('bang'));
      });

      afterEach(function() {
        window.document.createElement.restore();
      });

      it('returns a rejecting promise', function() {
        return expect(this.loader().whenLoaded()).to.eventually.be.rejected;
      });

    });

    describe('when the facebook sdk is loaded', function() {

      beforeEach(function() {
        sinon.stub(window.document, 'getElementById').returns({});
        window.FB = {
          init: () => {}
        };
      });

      afterEach(function() {
        window.document.getElementById.restore();
        delete window.FB;
      });

      it('returns a resolving promise', function() {
        return expect(this.loader().whenLoaded()).to.eventually.be.fulfilled;
      });

    });

  });

  function loginFuncSpec(method) {

    describe(method, function() {

      beforeEach(function() {
        this.loader = () => facebook({ appId: 'doesntmatter' });
      });

      describe('when the facebook sdk fails to load', function() {

        beforeEach(function() {
          sinon.stub(window.document, 'getElementById').returns({});
          window.FB = {
            init: () => {
              throw new Error('bang');
            }
          };
        });

        afterEach(function() {
          window.document.getElementById.restore();
          delete window.FB;
        });

        it('returns a rejecting promise', function() {
          return expect(this.loader()[method]()).to.eventually.be.rejected;
        });

      });

      describe('when the facebook sdk is loaded', function() {

        beforeEach(function() {
          sinon.stub(window.document, 'getElementById').returns({});
          window.FB = {
            init: () => {}
          };
          window.FB[method] = () => {};
        });

        afterEach(function() {
          window.document.getElementById.restore();
          delete window.FB;
        });

        describe('when the user is not connected', function() {

          beforeEach(function() {
            this.response = { status: 'not_authorized' };
            sinon.stub(window.FB, method).yields(this.response);
          });

          afterEach(function() {
            window.FB[method].restore();
          });

          it('returns a rejecting promise with the response', function() {
            return expect(this.loader()[method]()).to.eventually.be.rejectedWith(this.response);
          });

        });

        describe('when the user is connected', function() {

          beforeEach(function() {
            this.response = { status: 'connected' };
            sinon.stub(window.FB, method).yields(this.response);
          });

          afterEach(function() {
            window.FB[method].restore();
          });

          it('returns a resolving promise with the response', function() {
            return expect(this.loader()[method]()).to.eventually.deep.equal(this.response);
          });

        });

      });

    });

  }

  loginFuncSpec('login');
  loginFuncSpec('getLoginStatus');

});
